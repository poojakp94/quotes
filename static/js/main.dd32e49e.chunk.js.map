{"version":3,"sources":["twitter.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","quote","author","newQuote","setNewQuote","getQuote","fetch","then","response","json","data","en","useEffect","className","id","href","target","src","twitter","alt","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,qC,uLC0C5BC,MAtCf,WAAgB,IAAD,EACmBC,mBAAS,CACvCC,MAAO,oHACPC,OAAQ,sBAHG,mBACNC,EADM,KACIC,EADJ,KAMPC,EAAW,WACfC,MAAM,8DACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLN,EAAY,CAACH,MAAQS,EAAKC,GAC1BT,OAASQ,EAAKR,aAOlB,OAHAU,qBAAU,WACRP,MACC,IAED,yBAAKQ,UAAU,OACb,yBAAKC,GAAG,aACN,6BACE,uBAAGA,GAAG,QAAQX,EAASF,OACvB,yBAAKa,GAAG,UAAR,KAAoBX,EAASD,SAE/B,yBAAKW,UAAU,gBACb,uBAAGE,KAAI,gDAA2CZ,EAASF,MAApD,aAA8DE,EAASD,QAAUY,GAAG,cAAcE,OAAO,UAC9G,yBAAKC,IAAKC,IAASC,IAAI,MAEzB,6BACE,4BAAQL,GAAG,YAAYM,QAASf,GAAhC,mBCtBQgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dd32e49e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter.0251d8ee.png\";","import React, { useState, useEffect } from \"react\";\nimport twitter from \"./twitter.png\";\nimport \"./App.css\";\n\nfunction App() {\n  const [newQuote, setNewQuote] = useState({\n    quote: 'Part of what makes programming difficult is most of the time we’re doing stuff we’ve never done before.',\n    author: 'Douglas Crockford'\n  });\n\n  const getQuote = () => {\n    fetch(\"https://programming-quotes-api.herokuapp.com/quotes/random\")\n    .then((response) => response.json())\n    .then((data) => {\n      setNewQuote({quote : data.en,\n      author : data.author});\n      \n    });\n  }\n  useEffect(() => {\n    getQuote();\n  }, []);\n  return (\n    <div className=\"App\">\n      <div id=\"quote-box\">\n        <div>\n          <p id=\"text\">{newQuote.quote}</p>\n          <div id=\"author\">- {newQuote.author}</div>\n        </div>\n        <div className=\"icon-wrapper\">\n          <a href={`https://twitter.com/intent/tweet?text=${newQuote.quote} -${newQuote.author}`} id=\"tweet-quote\" target=\"_blank\">\n            <img src={twitter} alt=\"\"></img>\n          </a>\n          <div>\n            <button id=\"new-quote\" onClick={getQuote}>Next Quote</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}